use graph::to_vec::ToVec;
use graph::Graph;
use graph::Node;
use std::sync::{Arc, Mutex};
use std::thread;
use std::mem;

#[allow(dead_code)]
pub struct BoW {
    graph: Arc<Graph>,
    vocabulary: Arc<Vec<String>>,
    pub threads_count: u8
}

#[allow(dead_code)]
pub struct BoWVertex {
    graph: Arc<Graph>,
    vocabulary: Arc<Vec<Vec<u16>>>,
    vocabulary_x32: Arc<Vec<String>>,
    pub threads_count: u8
}

impl BoW {
    pub fn new(graph: Arc<Graph>) -> BoW {
        BoW {
            graph,
            vocabulary: Arc::new(vec![
                "push".to_string(),
                "pop".to_string(),
                "or".to_string(),
                "and".to_string(),
                "es".to_string(),
                "sub".to_string(),
                "cs".to_string(),
                "xor".to_string(),
                "ss".to_string(),
                "cmp".to_string(),
                "ds".to_string(),
                "pusha".to_string(),
                "popa".to_string(),
                "bound".to_string(),
                "arpl".to_string(),
                "fs".to_string(),
                "gs".to_string(),
                "imul".to_string(),
                "ins".to_string(),
                "outs".to_string(),
                "jo".to_string(),
                "jno".to_string(),
                "jb".to_string(),
                "jnb".to_string(),
                "jz".to_string(),
                "jnz".to_string(),
                "js".to_string(),
                "jns".to_string(),
                "jp".to_string(),
                "jnp".to_string(),
                "jl".to_string(),
                "jnl".to_string(),
                "jle".to_string(),
                "jnle".to_string(),
                "test".to_string(),
                "xchg".to_string(),
                "mov".to_string(),
                "nop".to_string(),
                "pause".to_string(),
                "cwd".to_string(),
                "fwait".to_string(),
                "pushf".to_string(),
                "popf".to_string(),
                "sahf".to_string(),
                "lahf".to_string(),
                "movs".to_string(),
                "cmps".to_string(),
                "stos".to_string(),
                "lods".to_string(),
                "r8".to_string(),
                "rol".to_string(),
                "ror".to_string(),
                "rcl".to_string(),
                "rcr".to_string(),
                "shl".to_string(),
                "shr".to_string(),
                "sal".to_string(),
                "sar".to_string(),
                "retn".to_string(),
                "les".to_string(),
                "lds".to_string(),
                "enter".to_string(),
                "retf".to_string(),
                "int".to_string(),
                "into".to_string(),
                "iret".to_string(),
                "iretd".to_string(),
                "amx".to_string(),
                "salc".to_string(),
                "xlat".to_string(),
                "fmul".to_string(),
                "fsub".to_string(),
                "fsubr".to_string(),
                "fld".to_string(),
                "fxch".to_string(),
                "fst".to_string(),
                "fnop".to_string(),
                "fstp".to_string(),
                "fstp1".to_string(),
                "ftst".to_string(),
                "fxam".to_string(),
                "fldl2t".to_string(),
                "fldpi".to_string(),
                "fldlg2".to_string(),
                "fldln2".to_string(),
                "fldz".to_string(),
                "fnstenv".to_string(),
                "fstenv".to_string(),
                "fyl2x".to_string(),
                "fptan".to_string(),
                "fpatan".to_string(),
                "fprem1".to_string(),
                "fincstp".to_string(),
                "fnstcw".to_string(),
                "fstcw".to_string(),
                "fprem".to_string(),
                "fyl2xp1".to_string(),
                "fsqrt".to_string(),
                "fsincos".to_string(),
                "frndint".to_string(),
                "fsin".to_string(),
                "fimul".to_string(),
                "ficom".to_string(),
                "ficomp".to_string(),
                "fisub".to_string(),
                "fisubr".to_string(),
                "fucompp".to_string(),
                "fidiv".to_string(),
                "fidivr".to_string(),
                "fild".to_string(),
                "fisttp".to_string(),
                "fist".to_string(),
                "fistp".to_string(),
                "fneni".to_string(),
                "nop".to_string(),
                "fndisi".to_string(),
                "fnclex".to_string(),
                "fninit".to_string(),
                "finit".to_string(),
                "fnsetpm".to_string(),
                "fucomi".to_string(),
                "fxch4".to_string(),
                "frstor".to_string(),
                "fucom".to_string(),
                "fucomp".to_string(),
                "fnsave".to_string(),
                "fsave".to_string(),
                "fnstsw".to_string(),
                "fstsw".to_string(),
                "fmulp".to_string(),
                "fsubrp".to_string(),
                "fsubp".to_string(),
                "fxch7".to_string(),
                "fstp8".to_string(),
                "fstp9".to_string(),
                "fucomip".to_string(),
                "loopnz".to_string(),
                "loopz".to_string(),
                "loop".to_string(),
                "jcxz".to_string(),
                "in".to_string(),
                "out".to_string(),
                "jmp".to_string(),
                "jmpf".to_string(),
                "lock".to_string(),
                "int1".to_string(),
                "repnz".to_string(),
                "rep".to_string(),
                "repz".to_string(),
                "hlt".to_string(),
                "cmc".to_string(),
                "not".to_string(),
                "neg".to_string(),
                "mul".to_string(),
                "div".to_string(),
                "idiv".to_string(),
                "clc".to_string(),
                "stc".to_string(),
                "cli".to_string(),
                "sti".to_string(),
                "cld".to_string(),
                "std".to_string(),
                "inc".to_string(),
                "sldt".to_string(),
                "str".to_string(),
                "lldt".to_string(),
                "ltr".to_string(),
                "verr".to_string(),
                "verw".to_string(),
                "sgdt".to_string(),
                "vmlaunch".to_string(),
                "vmresume".to_string(),
                "sidt".to_string(),
                "monitor".to_string(),
                "mwait".to_string(),
                "lgdt".to_string(),
                "xgetbv".to_string(),
                "xsetbv".to_string(),
                "lidt".to_string(),
                "smsw".to_string(),
                "lmsw".to_string(),
                "invlpg".to_string(),
                "rdtscp".to_string(),
                "lar".to_string(),
                "lsl".to_string(),
                "clts".to_string(),
                "invd".to_string(),
                "wbinvd".to_string(),
                "movups".to_string(),
                "movss".to_string(),
                "movupd".to_string(),
                "movsd".to_string(),
                "movhlps".to_string(),
                "movlps".to_string(),
                "movlpd".to_string(),
                "movsldup".to_string(),
                "unpcklps".to_string(),
                "unpcklpd".to_string(),
                "unpckhps".to_string(),
                "unpckhpd".to_string(),
                "movlhps".to_string(),
                "movhps".to_string(),
                "movhpd".to_string(),
                "movshdup".to_string(),
                "hint_nop".to_string(),
                "movaps".to_string(),
                "movapd".to_string(),
                "cvtpi2ps".to_string(),
                "cvtsi2ss".to_string(),
                "cvtpi2pd".to_string(),
                "cvtsi2sd".to_string(),
                "movntps".to_string(),
                "movntpd".to_string(),
                "cvttps2pi".to_string(),
                "cvttss2si".to_string(),
                "cvtps2pi".to_string(),
                "cvtss2si".to_string(),
                "ucomiss".to_string(),
                "ucomisd".to_string(),
                "comiss".to_string(),
                "comisd".to_string(),
                "wrmsr".to_string(),
                "rdtsc".to_string(),
                "rdmsr".to_string(),
                "rdpmc".to_string(),
                "sysenter".to_string(),
                "sysexit".to_string(),
                "phsubw".to_string(),
                "phsubsw".to_string(),
                "psignb".to_string(),
                "psignw".to_string(),
                "psignd".to_string(),
                "pmulhrsw".to_string(),
                "pblendvb".to_string(),
                "blendvps".to_string(),
                "blendvpd".to_string(),
                "ptest".to_string(),
                "pmovsxbw".to_string(),
                "pmovsxbq".to_string(),
                "pmovsxwd".to_string(),
                "pmovsxwq".to_string(),
                "pmovsxdq".to_string(),
                "pmuldq".to_string(),
                "pcmpeqq".to_string(),
                "movntdqa".to_string(),
                "pmovzxbw".to_string(),
                "pmovzxbq".to_string(),
                "pmovzxwd".to_string(),
                "pmovzxwq".to_string(),
                "pmovzxdq".to_string(),
                "pcmpgtq".to_string(),
                "pminsb".to_string(),
                "pminsd".to_string(),
                "pminuw".to_string(),
                "pminud".to_string(),
                "pmaxsb".to_string(),
                "pmaxsd".to_string(),
                "pmaxuw".to_string(),
                "pmaxud".to_string(),
                "pmulld".to_string(),
                "phminposuw".to_string(),
                "invept".to_string(),
                "invvpid".to_string(),
                "roundps".to_string(),
                "roundpd".to_string(),
                "roundss".to_string(),
                "roundsd".to_string(),
                "blendps".to_string(),
                "blendpd".to_string(),
                "pblendw".to_string(),
                "palignr".to_string(),
                "pextrb".to_string(),
                "pextrw".to_string(),
                "pextrd".to_string(),
                "pinsrb".to_string(),
                "insertps".to_string(),
                "pinsrd".to_string(),
                "dpps".to_string(),
                "dppd".to_string(),
                "pcmpestrm".to_string(),
                "pcmpestri".to_string(),
                "pcmpistrm".to_string(),
                "pcmpistri".to_string(),
                "cmovo".to_string(),
                "cmovno".to_string(),
                "cmovb".to_string(),
                "cmovnb".to_string(),
                "cmovz".to_string(),
                "cmovnz".to_string(),
                "cmovs".to_string(),
                "cmovns".to_string(),
                "cmovp".to_string(),
                "cmovnp".to_string(),
                "cmovl".to_string(),
                "cmovnl".to_string(),
                "cmovle".to_string(),
                "cmovnle".to_string(),
                "movmskps".to_string(),
                "movmskpd".to_string(),
                "sqrtps".to_string(),
                "sqrtss".to_string(),
                "sqrtpd".to_string(),
                "sqrtsd".to_string(),
                "rsqrtps".to_string(),
                "rsqrtss".to_string(),
                "rcpps".to_string(),
                "rcpss".to_string(),
                "andps".to_string(),
                "andpd".to_string(),
                "andnps".to_string(),
                "andnpd".to_string(),
                "orps".to_string(),
                "orpd".to_string(),
                "xorps".to_string(),
                "xorpd".to_string(),
                "mulps".to_string(),
                "mulss".to_string(),
                "mulpd".to_string(),
                "mulsd".to_string(),
                "cvtps2pd".to_string(),
                "cvtss2sd".to_string(),
                "cvtdq2ps".to_string(),
                "subps".to_string(),
                "subss".to_string(),
                "subpd".to_string(),
                "subsd".to_string(),
                "minps".to_string(),
                "minss".to_string(),
                "minpd".to_string(),
                "minsd".to_string(),
                "divps".to_string(),
                "divss".to_string(),
                "divpd".to_string(),
                "divsd".to_string(),
                "maxps".to_string(),
                "maxss".to_string(),
                "maxpd".to_string(),
                "maxsd".to_string(),
                "punpcklbw".to_string(),
                "punpcklwd".to_string(),
                "punpckldq".to_string(),
                "pcmpgtb".to_string(),
                "pcmpgtw".to_string(),
                "pcmpgtd".to_string(),
                "punpckhbw".to_string(),
                "punpckhwd".to_string(),
                "punpckhdq".to_string(),
                "punpcklqdq".to_string(),
                "punpckhqdq".to_string(),
                "movd".to_string(),
                "movq".to_string(),
                "movdqa".to_string(),
                "movdqu".to_string(),
                "pshufw".to_string(),
                "pshuflw".to_string(),
                "pshufhw".to_string(),
                "psrlw".to_string(),
                "psraw".to_string(),
                "psllw".to_string(),
                "psrld".to_string(),
                "pslld".to_string(),
                "psrlq".to_string(),
                "psrldq".to_string(),
                "psllq".to_string(),
                "pslldq".to_string(),
                "pcmpeqb".to_string(),
                "pcmpeqw".to_string(),
                "pcmpeqd".to_string(),
                "emms".to_string(),
                "vmwrite".to_string(),
                "hsubpd".to_string(),
                "hsubps".to_string(),
                "seto".to_string(),
                "setno".to_string(),
                "setb".to_string(),
                "setnb".to_string(),
                "setz".to_string(),
                "setnz".to_string(),
                "sets".to_string(),
                "setns".to_string(),
                "setp".to_string(),
                "setnp".to_string(),
                "setl".to_string(),
                "setnl".to_string(),
                "setle".to_string(),
                "setnle".to_string(),
                "cpuid".to_string(),
                "bt".to_string(),
                "shld".to_string(),
                "rsm".to_string(),
                "bts".to_string(),
                "shrd".to_string(),
                "fxsave".to_string(),
                "fxrstor".to_string(),
                "ldmxcsr".to_string(),
                "stmxcsr".to_string(),
                "xsave".to_string(),
                "xrstor".to_string(),
                "clflush".to_string(),
                "cmpxchg".to_string(),
                "lss".to_string(),
                "btr".to_string(),
                "lfs".to_string(),
                "lgs".to_string(),
                "movzx".to_string(),
                "popcnt".to_string(),
                "ud".to_string(),
                "btc".to_string(),
                "bsf".to_string(),
                "bsr".to_string(),
                "movsx".to_string(),
                "cmpps".to_string(),
                "cmpss".to_string(),
                "cmppd".to_string(),
                "cmpsd".to_string(),
                "movnti".to_string(),
                "pinsrw".to_string(),
                "shufps".to_string(),
                "shufpd".to_string(),
                "vmptrld".to_string(),
                "vmxon".to_string(),
                "vmptrst".to_string(),
                "pmullw".to_string(),
                "movdq2q".to_string(),
                "pmovmskb".to_string(),
                "psubusb".to_string(),
                "psubusw".to_string(),
                "pminub".to_string(),
                "pand".to_string(),
                "pmaxub".to_string(),
                "pandn".to_string(),
                "pavgb".to_string(),
                "pavgw".to_string(),
                "pmulhuw".to_string(),
                "pmulhw".to_string(),
                "cvtdq2pd".to_string(),
                "movntq".to_string(),
                "movntdq".to_string(),
                "psubsb".to_string(),
                "psubsw".to_string(),
                "pminsw".to_string(),
                "por".to_string(),
                "pmaxsw".to_string(),
                "pxor".to_string(),
                "pmuludq".to_string(),
                "maskmovq".to_string(),
                "maskmovdqu".to_string(),
                "psubw".to_string(),
                "psubq".to_string()
            ]),
            threads_count: 4
        }
    }
    #[allow(dead_code)]
    pub fn set_vocabulary(&mut self, vocabulary: Vec<String>) -> &mut Self {
        self.vocabulary = Arc::new(vocabulary);
        self
    }
    fn count_match_of_word_in_doc(doc: &String, word: &String) -> usize {
        let mut searched = word.clone();
        searched.push_str(" ");
        doc.matches(&searched).count()
    }
}

impl BoWVertex {
    pub fn new(graph: Arc<Graph>) -> BoWVertex {
        let mut bow_vertex = BoWVertex {
            graph,
            vocabulary: Arc::new(vec![]),
            vocabulary_x32: Arc::new(vec![
                "push".to_string(),
                "pop".to_string(),
                "or".to_string(),
                "and".to_string(),
                "es".to_string(),
                "sub".to_string(),
                "cs".to_string(),
                "xor".to_string(),
                "ss".to_string(),
                "cmp".to_string(),
                "ds".to_string(),
                "pusha".to_string(),
                "popa".to_string(),
                "bound".to_string(),
                "arpl".to_string(),
                "fs".to_string(),
                "gs".to_string(),
                "imul".to_string(),
                "ins".to_string(),
                "outs".to_string(),
                "jo".to_string(),
                "jno".to_string(),
                "jb".to_string(),
                "jnb".to_string(),
                "jz".to_string(),
                "jnz".to_string(),
                "js".to_string(),
                "jns".to_string(),
                "jp".to_string(),
                "jnp".to_string(),
                "jl".to_string(),
                "jnl".to_string(),
                "jle".to_string(),
                "jnle".to_string(),
                "test".to_string(),
                "xchg".to_string(),
                "mov".to_string(),
                "nop".to_string(),
                "pause".to_string(),
                "cwd".to_string(),
                "fwait".to_string(),
                "pushf".to_string(),
                "popf".to_string(),
                "sahf".to_string(),
                "lahf".to_string(),
                "movs".to_string(),
                "cmps".to_string(),
                "stos".to_string(),
                "lods".to_string(),
                "r8".to_string(),
                "rol".to_string(),
                "ror".to_string(),
                "rcl".to_string(),
                "rcr".to_string(),
                "shl".to_string(),
                "shr".to_string(),
                "sal".to_string(),
                "sar".to_string(),
                "retn".to_string(),
                "les".to_string(),
                "lds".to_string(),
                "enter".to_string(),
                "retf".to_string(),
                "int".to_string(),
                "into".to_string(),
                "iret".to_string(),
                "iretd".to_string(),
                "amx".to_string(),
                "salc".to_string(),
                "xlat".to_string(),
                "fmul".to_string(),
                "fsub".to_string(),
                "fsubr".to_string(),
                "fld".to_string(),
                "fxch".to_string(),
                "fst".to_string(),
                "fnop".to_string(),
                "fstp".to_string(),
                "fstp1".to_string(),
                "ftst".to_string(),
                "fxam".to_string(),
                "fldl2t".to_string(),
                "fldpi".to_string(),
                "fldlg2".to_string(),
                "fldln2".to_string(),
                "fldz".to_string(),
                "fnstenv".to_string(),
                "fstenv".to_string(),
                "fyl2x".to_string(),
                "fptan".to_string(),
                "fpatan".to_string(),
                "fprem1".to_string(),
                "fincstp".to_string(),
                "fnstcw".to_string(),
                "fstcw".to_string(),
                "fprem".to_string(),
                "fyl2xp1".to_string(),
                "fsqrt".to_string(),
                "fsincos".to_string(),
                "frndint".to_string(),
                "fsin".to_string(),
                "fimul".to_string(),
                "ficom".to_string(),
                "ficomp".to_string(),
                "fisub".to_string(),
                "fisubr".to_string(),
                "fucompp".to_string(),
                "fidiv".to_string(),
                "fidivr".to_string(),
                "fild".to_string(),
                "fisttp".to_string(),
                "fist".to_string(),
                "fistp".to_string(),
                "fneni".to_string(),
                "nop".to_string(),
                "fndisi".to_string(),
                "fnclex".to_string(),
                "fninit".to_string(),
                "finit".to_string(),
                "fnsetpm".to_string(),
                "fucomi".to_string(),
                "fxch4".to_string(),
                "frstor".to_string(),
                "fucom".to_string(),
                "fucomp".to_string(),
                "fnsave".to_string(),
                "fsave".to_string(),
                "fnstsw".to_string(),
                "fstsw".to_string(),
                "fmulp".to_string(),
                "fsubrp".to_string(),
                "fsubp".to_string(),
                "fxch7".to_string(),
                "fstp8".to_string(),
                "fstp9".to_string(),
                "fucomip".to_string(),
                "loopnz".to_string(),
                "loopz".to_string(),
                "loop".to_string(),
                "jcxz".to_string(),
                "in".to_string(),
                "out".to_string(),
                "jmp".to_string(),
                "jmpf".to_string(),
                "lock".to_string(),
                "int1".to_string(),
                "repnz".to_string(),
                "rep".to_string(),
                "repz".to_string(),
                "hlt".to_string(),
                "cmc".to_string(),
                "not".to_string(),
                "neg".to_string(),
                "mul".to_string(),
                "div".to_string(),
                "idiv".to_string(),
                "clc".to_string(),
                "stc".to_string(),
                "cli".to_string(),
                "sti".to_string(),
                "cld".to_string(),
                "std".to_string(),
                "inc".to_string(),
                "sldt".to_string(),
                "str".to_string(),
                "lldt".to_string(),
                "ltr".to_string(),
                "verr".to_string(),
                "verw".to_string(),
                "sgdt".to_string(),
                "vmlaunch".to_string(),
                "vmresume".to_string(),
                "sidt".to_string(),
                "monitor".to_string(),
                "mwait".to_string(),
                "lgdt".to_string(),
                "xgetbv".to_string(),
                "xsetbv".to_string(),
                "lidt".to_string(),
                "smsw".to_string(),
                "lmsw".to_string(),
                "invlpg".to_string(),
                "rdtscp".to_string(),
                "lar".to_string(),
                "lsl".to_string(),
                "clts".to_string(),
                "invd".to_string(),
                "wbinvd".to_string(),
                "movups".to_string(),
                "movss".to_string(),
                "movupd".to_string(),
                "movsd".to_string(),
                "movhlps".to_string(),
                "movlps".to_string(),
                "movlpd".to_string(),
                "movsldup".to_string(),
                "unpcklps".to_string(),
                "unpcklpd".to_string(),
                "unpckhps".to_string(),
                "unpckhpd".to_string(),
                "movlhps".to_string(),
                "movhps".to_string(),
                "movhpd".to_string(),
                "movshdup".to_string(),
                "hint_nop".to_string(),
                "movaps".to_string(),
                "movapd".to_string(),
                "cvtpi2ps".to_string(),
                "cvtsi2ss".to_string(),
                "cvtpi2pd".to_string(),
                "cvtsi2sd".to_string(),
                "movntps".to_string(),
                "movntpd".to_string(),
                "cvttps2pi".to_string(),
                "cvttss2si".to_string(),
                "cvtps2pi".to_string(),
                "cvtss2si".to_string(),
                "ucomiss".to_string(),
                "ucomisd".to_string(),
                "comiss".to_string(),
                "comisd".to_string(),
                "wrmsr".to_string(),
                "rdtsc".to_string(),
                "rdmsr".to_string(),
                "rdpmc".to_string(),
                "sysenter".to_string(),
                "sysexit".to_string(),
                "phsubw".to_string(),
                "phsubsw".to_string(),
                "psignb".to_string(),
                "psignw".to_string(),
                "psignd".to_string(),
                "pmulhrsw".to_string(),
                "pblendvb".to_string(),
                "blendvps".to_string(),
                "blendvpd".to_string(),
                "ptest".to_string(),
                "pmovsxbw".to_string(),
                "pmovsxbq".to_string(),
                "pmovsxwd".to_string(),
                "pmovsxwq".to_string(),
                "pmovsxdq".to_string(),
                "pmuldq".to_string(),
                "pcmpeqq".to_string(),
                "movntdqa".to_string(),
                "pmovzxbw".to_string(),
                "pmovzxbq".to_string(),
                "pmovzxwd".to_string(),
                "pmovzxwq".to_string(),
                "pmovzxdq".to_string(),
                "pcmpgtq".to_string(),
                "pminsb".to_string(),
                "pminsd".to_string(),
                "pminuw".to_string(),
                "pminud".to_string(),
                "pmaxsb".to_string(),
                "pmaxsd".to_string(),
                "pmaxuw".to_string(),
                "pmaxud".to_string(),
                "pmulld".to_string(),
                "phminposuw".to_string(),
                "invept".to_string(),
                "invvpid".to_string(),
                "roundps".to_string(),
                "roundpd".to_string(),
                "roundss".to_string(),
                "roundsd".to_string(),
                "blendps".to_string(),
                "blendpd".to_string(),
                "pblendw".to_string(),
                "palignr".to_string(),
                "pextrb".to_string(),
                "pextrw".to_string(),
                "pextrd".to_string(),
                "pinsrb".to_string(),
                "insertps".to_string(),
                "pinsrd".to_string(),
                "dpps".to_string(),
                "dppd".to_string(),
                "pcmpestrm".to_string(),
                "pcmpestri".to_string(),
                "pcmpistrm".to_string(),
                "pcmpistri".to_string(),
                "cmovo".to_string(),
                "cmovno".to_string(),
                "cmovb".to_string(),
                "cmovnb".to_string(),
                "cmovz".to_string(),
                "cmovnz".to_string(),
                "cmovs".to_string(),
                "cmovns".to_string(),
                "cmovp".to_string(),
                "cmovnp".to_string(),
                "cmovl".to_string(),
                "cmovnl".to_string(),
                "cmovle".to_string(),
                "cmovnle".to_string(),
                "movmskps".to_string(),
                "movmskpd".to_string(),
                "sqrtps".to_string(),
                "sqrtss".to_string(),
                "sqrtpd".to_string(),
                "sqrtsd".to_string(),
                "rsqrtps".to_string(),
                "rsqrtss".to_string(),
                "rcpps".to_string(),
                "rcpss".to_string(),
                "andps".to_string(),
                "andpd".to_string(),
                "andnps".to_string(),
                "andnpd".to_string(),
                "orps".to_string(),
                "orpd".to_string(),
                "xorps".to_string(),
                "xorpd".to_string(),
                "mulps".to_string(),
                "mulss".to_string(),
                "mulpd".to_string(),
                "mulsd".to_string(),
                "cvtps2pd".to_string(),
                "cvtss2sd".to_string(),
                "cvtdq2ps".to_string(),
                "subps".to_string(),
                "subss".to_string(),
                "subpd".to_string(),
                "subsd".to_string(),
                "minps".to_string(),
                "minss".to_string(),
                "minpd".to_string(),
                "minsd".to_string(),
                "divps".to_string(),
                "divss".to_string(),
                "divpd".to_string(),
                "divsd".to_string(),
                "maxps".to_string(),
                "maxss".to_string(),
                "maxpd".to_string(),
                "maxsd".to_string(),
                "punpcklbw".to_string(),
                "punpcklwd".to_string(),
                "punpckldq".to_string(),
                "pcmpgtb".to_string(),
                "pcmpgtw".to_string(),
                "pcmpgtd".to_string(),
                "punpckhbw".to_string(),
                "punpckhwd".to_string(),
                "punpckhdq".to_string(),
                "punpcklqdq".to_string(),
                "punpckhqdq".to_string(),
                "movd".to_string(),
                "movq".to_string(),
                "movdqa".to_string(),
                "movdqu".to_string(),
                "pshufw".to_string(),
                "pshuflw".to_string(),
                "pshufhw".to_string(),
                "psrlw".to_string(),
                "psraw".to_string(),
                "psllw".to_string(),
                "psrld".to_string(),
                "pslld".to_string(),
                "psrlq".to_string(),
                "psrldq".to_string(),
                "psllq".to_string(),
                "pslldq".to_string(),
                "pcmpeqb".to_string(),
                "pcmpeqw".to_string(),
                "pcmpeqd".to_string(),
                "emms".to_string(),
                "vmwrite".to_string(),
                "hsubpd".to_string(),
                "hsubps".to_string(),
                "seto".to_string(),
                "setno".to_string(),
                "setb".to_string(),
                "setnb".to_string(),
                "setz".to_string(),
                "setnz".to_string(),
                "sets".to_string(),
                "setns".to_string(),
                "setp".to_string(),
                "setnp".to_string(),
                "setl".to_string(),
                "setnl".to_string(),
                "setle".to_string(),
                "setnle".to_string(),
                "cpuid".to_string(),
                "bt".to_string(),
                "shld".to_string(),
                "rsm".to_string(),
                "bts".to_string(),
                "shrd".to_string(),
                "fxsave".to_string(),
                "fxrstor".to_string(),
                "ldmxcsr".to_string(),
                "stmxcsr".to_string(),
                "xsave".to_string(),
                "xrstor".to_string(),
                "clflush".to_string(),
                "cmpxchg".to_string(),
                "lss".to_string(),
                "btr".to_string(),
                "lfs".to_string(),
                "lgs".to_string(),
                "movzx".to_string(),
                "popcnt".to_string(),
                "ud".to_string(),
                "btc".to_string(),
                "bsf".to_string(),
                "bsr".to_string(),
                "movsx".to_string(),
                "cmpps".to_string(),
                "cmpss".to_string(),
                "cmppd".to_string(),
                "cmpsd".to_string(),
                "movnti".to_string(),
                "pinsrw".to_string(),
                "shufps".to_string(),
                "shufpd".to_string(),
                "vmptrld".to_string(),
                "vmxon".to_string(),
                "vmptrst".to_string(),
                "pmullw".to_string(),
                "movdq2q".to_string(),
                "pmovmskb".to_string(),
                "psubusb".to_string(),
                "psubusw".to_string(),
                "pminub".to_string(),
                "pand".to_string(),
                "pmaxub".to_string(),
                "pandn".to_string(),
                "pavgb".to_string(),
                "pavgw".to_string(),
                "pmulhuw".to_string(),
                "pmulhw".to_string(),
                "cvtdq2pd".to_string(),
                "movntq".to_string(),
                "movntdq".to_string(),
                "psubsb".to_string(),
                "psubsw".to_string(),
                "pminsw".to_string(),
                "por".to_string(),
                "pmaxsw".to_string(),
                "pxor".to_string(),
                "pmuludq".to_string(),
                "maskmovq".to_string(),
                "maskmovdqu".to_string(),
                "psubw".to_string(),
                "psubq".to_string()
            ]),
            threads_count: 1
        };
        bow_vertex.build_vocabulary();
        return bow_vertex;
    }
    #[allow(dead_code)]
    pub fn set_vocabulary(&mut self, vocabulary: Vec<Vec<u16>>) -> &mut Self {
        self.vocabulary = Arc::new(vocabulary);
        self
    }
    fn count_match_of_word_in_doc(doc: &String, word: &String) -> usize {
        let mut searched = word.clone();
        searched.push_str(" ");
        doc.matches(&searched).count()
    }
    fn vertex_to_vec(vocabulary_x32: &Vec<String>, node: & Node) -> Vec<u16> {
        let mut vertex_signature:Vec<u16> = vec![0; vocabulary_x32.len()];
        for word_index in 0..vocabulary_x32.len() {
            vertex_signature[word_index] += BoWVertex::count_match_of_word_in_doc(& node.label, & vocabulary_x32[word_index as usize]) as u16;
        }
        vertex_signature
    }
    fn signature_compare(a: & Vec<u16>, b: & Vec<u16>, delta: u16) -> bool {
        if a.len() != b.len() {
            panic!("The signatures must be a same size.");
        }
        for index in 0..a.len() {
            if (a[index] as i16 - b[index] as i16).abs() as u16 > delta {
                return false;
            }
        }
        return true;
    }
    fn build_vocabulary(&mut self){
        if self.vocabulary.len() != 0 {
            return;
        }
        let mut workers: Vec<thread::JoinHandle<()>> = Vec::with_capacity(self.threads_count as usize);
        let vertexes = Arc::new(self.graph.iter().map(|v| v).collect::<Vec<Arc<Node>>>());
        let vocabulary = mem::replace(&mut self.vocabulary, Arc::new(vec![]));
        let vocabulary_mutex: Arc<Mutex<Vec<Vec<u16>>>> = Arc::new(Mutex::new(Arc::try_unwrap(vocabulary).unwrap()));
        let vocabulary_x32: Arc<Vec<String>> = Arc::clone(&self.vocabulary_x32);
        let _threads_count = self.threads_count;
        let vertexes_count = vertexes.len();
        let vertexes_for_tread_length = vertexes_count / _threads_count as usize;
        for thread_id in 0.._threads_count {
            let vertexes_ref = Arc::clone(& vertexes);
            let vocabulary_x32_ref = Arc::clone(& vocabulary_x32);
            let vocabulary_mutex_ref = Arc::clone(&vocabulary_mutex);
            let worker = thread::spawn(move || {
                let start_index = (thread_id as u16 * vertexes_for_tread_length as u16) as u16;
                let length: u16 = if thread_id != _threads_count - 1 {
                    vertexes_for_tread_length as u16
                } else {
                    vertexes_for_tread_length as u16 + (vertexes_for_tread_length as u8 % _threads_count) as u16
                };
                for index in start_index..(start_index + length) {
                    let  vertex_signature = BoWVertex::vertex_to_vec(&vocabulary_x32_ref,& vertexes_ref[index as usize]);
                    let mut voc = vocabulary_mutex_ref.lock().unwrap();
                    if let None = voc.iter().find(|v: && Vec<u16>| {
                        for i in 0..v.len() {
                            if v[i] != vertex_signature[i] as u16 {
                                return false;
                            }
                        }
                        return true;
                    }) {
                        voc.push(vertex_signature);
                    }
                }
            });
            workers.push(worker);
        }
        for worker in workers {
            worker.join().unwrap();
        }
        let mutex = Arc::try_unwrap(vocabulary_mutex).unwrap();
        self.vocabulary = Arc::new(Mutex::into_inner(mutex).unwrap());
    }
}

#[derive(Debug, Clone)]
pub enum Vectorize {
    Algo(Arc<ToVec>),
    None
}

impl ToVec for BoW {
    fn to_vec(&self) -> Vec<f32> {
        let vec = vec![0f32; self.vocabulary.len()];
        let vocabulary_length = self.vocabulary.len();
        let words_for_thread_length = vocabulary_length / self.threads_count as usize;
        let mutex_vec: Arc<Mutex<Vec<f32>>> = Arc::new(Mutex::new(vec));
        let _threads_count = self.threads_count;
        for node in self.graph.iter() {
            let mut workers: Vec<thread::JoinHandle<()>> = Vec::with_capacity(self.threads_count as usize);
            for thread_id in 0..self.threads_count {
                let mutex_for_thread = Arc::clone(&mutex_vec);
                let vocabulary_for_thread = Arc::clone(&self.vocabulary);
                let node_for_thread = Arc::clone(&node);
                let worker: thread::JoinHandle<()> = thread::spawn(move || {
                    let start_index = (thread_id as u16 * words_for_thread_length as u16) as u16;
                    let length: u16 = if thread_id != _threads_count - 1 {
                        words_for_thread_length as u16
                    } else {
                        words_for_thread_length as u16 + (vocabulary_length as u8 % _threads_count) as u16
                    };
                    for index in start_index..length {
                        let count = BoW::count_match_of_word_in_doc(&node_for_thread.label, &vocabulary_for_thread[index as usize]);
                        let mut vec = mutex_for_thread.lock().unwrap();
                        vec[index as usize] += count as f32;
                    }
                });
                workers.push(worker);
            }
            for worker in workers {
                worker.join().unwrap();
            }
        }
        Mutex::into_inner(Arc::try_unwrap(mutex_vec).unwrap()).unwrap()
    }
}

impl ToVec for BoWVertex {
    fn to_vec(& self) -> Vec<f32> {
        if self.vocabulary.len() == 0 {
            panic!("Build vocabulary before call to_vec.");
        }
        let vec = vec![0f32; self.vocabulary.len()];
        let vocabulary_length = self.vocabulary.len();
        let words_for_thread_length = vocabulary_length / self.threads_count as usize;
        let mutex_vec: Arc<Mutex<Vec<f32>>> = Arc::new(Mutex::new(vec));
        let _threads_count = self.threads_count;
        for node in self.graph.iter() {
            let mut workers: Vec<thread::JoinHandle<()>> = Vec::with_capacity(self.threads_count as usize);
            for thread_id in 0..self.threads_count {
                let vec_for_node = BoWVertex::vertex_to_vec(& self.vocabulary_x32, & node);
                let mutex_for_thread = Arc::clone(&mutex_vec);
                let vocabulary_for_thread = Arc::clone(&self.vocabulary);
                let worker: thread::JoinHandle<()> = thread::spawn(move || {
                    let start_index = (thread_id as u16 * words_for_thread_length as u16) as u16;
                    let length: u16 = if thread_id != _threads_count - 1 {
                        words_for_thread_length as u16
                    } else {
                        words_for_thread_length as u16 + (vocabulary_length as u8 % _threads_count) as u16
                    };
                    for index in start_index..(start_index + length) {
                        if BoWVertex::signature_compare(& vec_for_node, & vocabulary_for_thread[index as usize], 1) {
                            let mut vec = mutex_for_thread.lock().unwrap();
                            vec[index as usize] += 1f32;
                        }
                    }
                });
                workers.push(worker);
            }
            for worker in workers {
                worker.join().unwrap();
            }
        }
        Mutex::into_inner(Arc::try_unwrap(mutex_vec).unwrap()).unwrap()
    }
}